package mikrozirkmixer1.pkg0;

import FreqAnalyzer.FFTransformer;
import FreqAnalyzer.FreqSample;
import FreqAnalyzer.Globals;
import FreqAnalyzer.Sample;
import FreqAnalyzer.SampleDisplayLabel;
import FreqAnalyzer.TimeSample;
import equalizer.Equalizer;
import equalizer.EqualizerDisplayLabel;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author eckerts
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initMyThings();
    }

    
    // My declarations
    
    SampleDisplayLabel probandTimeDisplayLabel = null;
    SampleDisplayLabel probandFreqDisplayLabel = null;
    SampleDisplayLabel therapistTimeDisplayLabel = null;
    SampleDisplayLabel therapistFreqDisplayLabel = null;
    EqualizerDisplayLabel equalizerDisplayLabel = null;
    SampleDisplayLabel mixDisplayLabel = null;
    SampleDisplayLabel pedalDisplayLabel = null;
    Equalizer equalizer = null;
    int lastMouseDraggedPosition = 0;
    
    /**
     * The List of SampleDisplayLabels associated with the EqualizerDisplayPanel. 
     * This Labels get equalized, when the Equalizer is changed.
     */
    ArrayList<SampleDisplayLabel> associatedDisplayLabels = null;
    
    /**
     * The mix factor. 1 means 100% proband, 0 means 0% proband.
     */
    double mixFactor = 0.5;
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        probandTimeTitlePanel = new javax.swing.JPanel();
        probandTimeTitleLabel = new javax.swing.JLabel();
        probandTimeFileNameLabel = new javax.swing.JLabel();
        probandTimeOpenButton = new javax.swing.JButton();
        therapistTimeTitlePanel = new javax.swing.JPanel();
        therapistTimeTitleLabel = new javax.swing.JLabel();
        therapistTimeFileNameLabel = new javax.swing.JLabel();
        therapistTimeOpenButton = new javax.swing.JButton();
        therapistTimeDisplayPanel = new javax.swing.JPanel();
        probandTimeDisplayPanel = new javax.swing.JPanel();
        probandFreqTitlePanel = new javax.swing.JPanel();
        probandFreqTitleLabel = new javax.swing.JLabel();
        probandFreqDisplayPanel = new javax.swing.JPanel();
        therapistFreqDisplayPanel = new javax.swing.JPanel();
        therapistFreqTitlePanel = new javax.swing.JPanel();
        therpistFreqTitleLabel = new javax.swing.JLabel();
        equalizerTitelPanel = new javax.swing.JPanel();
        equalizerTitleLabel = new javax.swing.JLabel();
        equalizerFileNameLabel = new javax.swing.JLabel();
        equalizerOpenButton = new javax.swing.JButton();
        equalizerSaveButton = new javax.swing.JButton();
        equalizerDisplayPanel = new javax.swing.JPanel();
        mixTitlePanel = new javax.swing.JPanel();
        mixTitleLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        mixDisplayPanel = new javax.swing.JPanel();
        pedalTitlePanel = new javax.swing.JPanel();
        pedalTitleLabel = new javax.swing.JLabel();
        pedalFileNameLabel = new javax.swing.JLabel();
        pedalOpenButton = new javax.swing.JButton();
        pedalDisplayPanel = new javax.swing.JPanel();
        mixSlider = new javax.swing.JSlider();
        mixProbandLabel = new javax.swing.JLabel();
        mixTherapistLabel = new javax.swing.JLabel();
        setToStandardButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MikroZirkMixer1.0");
        setPreferredSize(new java.awt.Dimension(1500, 800));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        probandTimeTitlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        probandTimeTitlePanel.setPreferredSize(new java.awt.Dimension(150, 120));
        java.awt.GridBagLayout probandTimeTitlePanelLayout = new java.awt.GridBagLayout();
        probandTimeTitlePanelLayout.columnWidths = new int[] {0};
        probandTimeTitlePanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        probandTimeTitlePanel.setLayout(probandTimeTitlePanelLayout);

        probandTimeTitleLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        probandTimeTitleLabel.setText("Proband Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        probandTimeTitlePanel.add(probandTimeTitleLabel, gridBagConstraints);

        probandTimeFileNameLabel.setText("No File open");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        probandTimeTitlePanel.add(probandTimeFileNameLabel, gridBagConstraints);

        probandTimeOpenButton.setText("open");
        probandTimeOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                probandTimeOpenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        probandTimeTitlePanel.add(probandTimeOpenButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(probandTimeTitlePanel, gridBagConstraints);

        therapistTimeTitlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        therapistTimeTitlePanel.setMinimumSize(new java.awt.Dimension(0, 0));
        therapistTimeTitlePanel.setPreferredSize(new java.awt.Dimension(150, 120));
        java.awt.GridBagLayout therapistTimeTitlePanelLayout = new java.awt.GridBagLayout();
        therapistTimeTitlePanelLayout.columnWidths = new int[] {0};
        therapistTimeTitlePanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        therapistTimeTitlePanel.setLayout(therapistTimeTitlePanelLayout);

        therapistTimeTitleLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        therapistTimeTitleLabel.setText("Therapist Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        therapistTimeTitlePanel.add(therapistTimeTitleLabel, gridBagConstraints);

        therapistTimeFileNameLabel.setText("No File open");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        therapistTimeTitlePanel.add(therapistTimeFileNameLabel, gridBagConstraints);

        therapistTimeOpenButton.setText("open");
        therapistTimeOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                therapistTimeOpenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        therapistTimeTitlePanel.add(therapistTimeOpenButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(therapistTimeTitlePanel, gridBagConstraints);

        therapistTimeDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        therapistTimeDisplayPanel.setPreferredSize(new java.awt.Dimension(675, 116));

        javax.swing.GroupLayout therapistTimeDisplayPanelLayout = new javax.swing.GroupLayout(therapistTimeDisplayPanel);
        therapistTimeDisplayPanel.setLayout(therapistTimeDisplayPanelLayout);
        therapistTimeDisplayPanelLayout.setHorizontalGroup(
            therapistTimeDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1129, Short.MAX_VALUE)
        );
        therapistTimeDisplayPanelLayout.setVerticalGroup(
            therapistTimeDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 116, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(therapistTimeDisplayPanel, gridBagConstraints);

        probandTimeDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout probandTimeDisplayPanelLayout = new javax.swing.GroupLayout(probandTimeDisplayPanel);
        probandTimeDisplayPanel.setLayout(probandTimeDisplayPanelLayout);
        probandTimeDisplayPanelLayout.setHorizontalGroup(
            probandTimeDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1129, Short.MAX_VALUE)
        );
        probandTimeDisplayPanelLayout.setVerticalGroup(
            probandTimeDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 637, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(probandTimeDisplayPanel, gridBagConstraints);

        probandFreqTitlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        probandFreqTitlePanel.setMinimumSize(new java.awt.Dimension(158, 100));
        java.awt.GridBagLayout probandFreqTitlePanelLayout = new java.awt.GridBagLayout();
        probandFreqTitlePanelLayout.columnWidths = new int[] {0};
        probandFreqTitlePanelLayout.rowHeights = new int[] {0};
        probandFreqTitlePanel.setLayout(probandFreqTitlePanelLayout);

        probandFreqTitleLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        probandFreqTitleLabel.setText("Proband Frequency");
        probandFreqTitleLabel.setMaximumSize(new java.awt.Dimension(2000, 1000));
        probandFreqTitleLabel.setMinimumSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(30, 2, 30, 2);
        probandFreqTitlePanel.add(probandFreqTitleLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(probandFreqTitlePanel, gridBagConstraints);

        probandFreqDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout probandFreqDisplayPanelLayout = new javax.swing.GroupLayout(probandFreqDisplayPanel);
        probandFreqDisplayPanel.setLayout(probandFreqDisplayPanelLayout);
        probandFreqDisplayPanelLayout.setHorizontalGroup(
            probandFreqDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        probandFreqDisplayPanelLayout.setVerticalGroup(
            probandFreqDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(probandFreqDisplayPanel, gridBagConstraints);

        therapistFreqDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout therapistFreqDisplayPanelLayout = new javax.swing.GroupLayout(therapistFreqDisplayPanel);
        therapistFreqDisplayPanel.setLayout(therapistFreqDisplayPanelLayout);
        therapistFreqDisplayPanelLayout.setHorizontalGroup(
            therapistFreqDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        therapistFreqDisplayPanelLayout.setVerticalGroup(
            therapistFreqDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(therapistFreqDisplayPanel, gridBagConstraints);

        therapistFreqTitlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        therapistFreqTitlePanel.setMinimumSize(new java.awt.Dimension(167, 100));
        therapistFreqTitlePanel.setLayout(new java.awt.GridBagLayout());

        therpistFreqTitleLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        therpistFreqTitleLabel.setText("Therapist Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 2, 30, 2);
        therapistFreqTitlePanel.add(therpistFreqTitleLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(therapistFreqTitlePanel, gridBagConstraints);

        equalizerTitelPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        java.awt.GridBagLayout equalizerTitelPanelLayout = new java.awt.GridBagLayout();
        equalizerTitelPanelLayout.columnWidths = new int[] {0, 5, 0};
        equalizerTitelPanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        equalizerTitelPanel.setLayout(equalizerTitelPanelLayout);

        equalizerTitleLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        equalizerTitleLabel.setText("Equalizer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        equalizerTitelPanel.add(equalizerTitleLabel, gridBagConstraints);

        equalizerFileNameLabel.setText("no file based equalizer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        equalizerTitelPanel.add(equalizerFileNameLabel, gridBagConstraints);

        equalizerOpenButton.setText("open");
        equalizerOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizerOpenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        equalizerTitelPanel.add(equalizerOpenButton, gridBagConstraints);

        equalizerSaveButton.setText("save");
        equalizerSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizerSaveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        equalizerTitelPanel.add(equalizerSaveButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(equalizerTitelPanel, gridBagConstraints);

        equalizerDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout equalizerDisplayPanelLayout = new javax.swing.GroupLayout(equalizerDisplayPanel);
        equalizerDisplayPanel.setLayout(equalizerDisplayPanelLayout);
        equalizerDisplayPanelLayout.setHorizontalGroup(
            equalizerDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        equalizerDisplayPanelLayout.setVerticalGroup(
            equalizerDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(equalizerDisplayPanel, gridBagConstraints);

        mixTitlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        java.awt.GridBagLayout mixTitlePanelLayout = new java.awt.GridBagLayout();
        mixTitlePanelLayout.columnWidths = new int[] {0};
        mixTitlePanelLayout.rowHeights = new int[] {0, 5, 0};
        mixTitlePanel.setLayout(mixTitlePanelLayout);

        mixTitleLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        mixTitleLabel.setText("Mix");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 2);
        mixTitlePanel.add(mixTitleLabel, gridBagConstraints);

        jButton1.setText("save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 2);
        mixTitlePanel.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(mixTitlePanel, gridBagConstraints);

        mixDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout mixDisplayPanelLayout = new javax.swing.GroupLayout(mixDisplayPanel);
        mixDisplayPanel.setLayout(mixDisplayPanelLayout);
        mixDisplayPanelLayout.setHorizontalGroup(
            mixDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mixDisplayPanelLayout.setVerticalGroup(
            mixDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 88, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(mixDisplayPanel, gridBagConstraints);

        pedalTitlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        java.awt.GridBagLayout pedalTitlePanelLayout = new java.awt.GridBagLayout();
        pedalTitlePanelLayout.columnWidths = new int[] {0};
        pedalTitlePanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        pedalTitlePanel.setLayout(pedalTitlePanelLayout);

        pedalTitleLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        pedalTitleLabel.setText("Pedal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pedalTitlePanel.add(pedalTitleLabel, gridBagConstraints);

        pedalFileNameLabel.setText("no file open");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pedalTitlePanel.add(pedalFileNameLabel, gridBagConstraints);

        pedalOpenButton.setText("open");
        pedalOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedalOpenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pedalTitlePanel.add(pedalOpenButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(pedalTitlePanel, gridBagConstraints);

        pedalDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pedalDisplayPanelLayout = new javax.swing.GroupLayout(pedalDisplayPanel);
        pedalDisplayPanel.setLayout(pedalDisplayPanelLayout);
        pedalDisplayPanelLayout.setHorizontalGroup(
            pedalDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pedalDisplayPanelLayout.setVerticalGroup(
            pedalDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(pedalDisplayPanel, gridBagConstraints);

        mixSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        mixSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mixSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(mixSlider, gridBagConstraints);

        mixProbandLabel.setText("50%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
        jPanel1.add(mixProbandLabel, gridBagConstraints);

        mixTherapistLabel.setText("50%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
        jPanel1.add(mixTherapistLabel, gridBagConstraints);

        setToStandardButton.setText("<html> set <br> everything <br> back to <br> Standard");
        setToStandardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setToStandardButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        jPanel1.add(setToStandardButton, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void probandTimeOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probandTimeOpenButtonActionPerformed
        probandTimeDisplayLabel.setSample(FileIO.openSampleFile());        
        probandFreqDisplayLabel.setSample((FFTransformer.transform((TimeSample)probandTimeDisplayLabel.getSample())));
        probandFreqDisplayLabel.zoom(Globals.standardZoomFactorTransformed);
        probandTimeDisplayLabel.repaint();
        probandFreqDisplayLabel.repaint();
        createEqualizerDisplayLabel();
        equalizerDisplayLabel.repaint();
        if(probandTimeDisplayLabel.getSample().getSize() != 0
                && therapistFreqDisplayLabel.getSample().getSize() != 0) mix();
    }//GEN-LAST:event_probandTimeOpenButtonActionPerformed

    private void therapistTimeOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_therapistTimeOpenButtonActionPerformed
        therapistTimeDisplayLabel.setSample(FileIO.openSampleFile());
        therapistFreqDisplayLabel.setSample((FFTransformer.transform((TimeSample)therapistTimeDisplayLabel.getSample())));
        therapistFreqDisplayLabel.zoom(Globals.standardZoomFactorTransformed);
        therapistTimeDisplayLabel.repaint();
        therapistFreqDisplayLabel.repaint();
        createEqualizerDisplayLabel();
        equalizerDisplayLabel.repaint();
        if(probandTimeDisplayLabel.getSample().getSize() != 0
                && therapistFreqDisplayLabel.getSample().getSize() != 0) mix();
    }//GEN-LAST:event_therapistTimeOpenButtonActionPerformed

    private void mixSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mixSliderStateChanged
        int value = mixSlider.getValue();
        mixProbandLabel.setText(new Integer(value).toString() + "%");
        mixTherapistLabel.setText(new Integer(100-value).toString() + "%");
        mixFactor = (double)value/100;
        if(!probandTimeDisplayLabel.getSample().getData().isEmpty() 
                && !therapistTimeDisplayLabel.getSample().getData().isEmpty()){
            mix();
        }
    }//GEN-LAST:event_mixSliderStateChanged

    private void pedalOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedalOpenButtonActionPerformed
        pedalDisplayLabel.setSample(FileIO.openSampleFile());
        pedalDisplayLabel.setZoomFactor(Globals.zoomFactor);
        pedalDisplayLabel.repaint();
    }//GEN-LAST:event_pedalOpenButtonActionPerformed

    private void equalizerOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizerOpenButtonActionPerformed
        JOptionPane.showMessageDialog(this, "Not yet supported", "Sorry", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_equalizerOpenButtonActionPerformed

    private void equalizerSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizerSaveButtonActionPerformed
        JOptionPane.showMessageDialog(this, "Not yet supported", "Sorry", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_equalizerSaveButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(this, "Not yet supported", "Sorry", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton1ActionPerformed


    
    private void setToStandardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setToStandardButtonActionPerformed
        probandTimeDisplayLabel.zoom(1);
        therapistTimeDisplayLabel.zoom(1);
        probandFreqDisplayLabel.zoom(Globals.standardZoomFactorTransformed);
        therapistFreqDisplayLabel.zoom(Globals.standardZoomFactorTransformed);
        equalizerDisplayLabel.setEqualizer(Equalizer.standardEqualizer());
        equalizerDisplayLabel.zoom(Globals.standardZoomFactorTransformed);  
        equalizerDisplayLabel.equalizeAll();
        retransform();
        mixDisplayLabel.zoom(1);
        pedalDisplayLabel.zoom(1);
        mixSlider.setValue(50);
        mixFactor = 0.5;
        this.mix();
    }//GEN-LAST:event_setToStandardButtonActionPerformed

    
    
    /**
     * Coordinated zooming of the four Time Display Panels
     * @param evt 
     */
    private void mouseWheelMovedInTimeDisplayArea(java.awt.event.MouseWheelEvent evt) {         
        int notches = evt.getWheelRotation();
        int zoomCentre = evt.getX();
        double zoomFactor = 1 + notches*Globals.zoomPerMousewheelNotch*Globals.zoomFactor;             
        try {
            probandTimeDisplayLabel.zoomAround(zoomFactor, zoomCentre);
            therapistTimeDisplayLabel.zoomAround(zoomFactor, zoomCentre);
            mixDisplayLabel.zoomAround(zoomFactor, zoomCentre);                
            pedalDisplayLabel.zoomAround(zoomFactor, zoomCentre);
            Globals.zoomFactor = zoomFactor;
        } catch (Exception ex) {
            System.out.println("Error while zooming: " + ex.toString());
        }   
    }
    
    /**
     * Coordinates shifting of the four Time Display Panels
     * @param evt 
     */
    private void mouseDraggedInTimeDisplayArea(MouseEvent evt) {
        int deltaX = evt.getX() - lastMouseDraggedPosition;
        lastMouseDraggedPosition = evt.getX();
        probandTimeDisplayLabel.shift(deltaX);
        therapistTimeDisplayLabel.shift(deltaX);
        mixDisplayLabel.shift(deltaX);            
        pedalDisplayLabel.shift(deltaX);
    }
    
    /**
     * Get the start position for dragging and zoom to standard by rightclick
     * (Both for the four time display panels)
     * @param evt 
     */
    private void mousePressedInTimeDisplayArea(MouseEvent evt) {
        if (evt.getButton() == MouseEvent.BUTTON1){
            lastMouseDraggedPosition = evt.getX();
        } 
        else if (evt.getButton() == MouseEvent.BUTTON3){
            probandTimeDisplayLabel.zoom(1);
            therapistTimeDisplayLabel.zoom(1);
            mixDisplayLabel.zoom(1);
            pedalDisplayLabel.zoom(1);            
            Globals.zoomFactor = 1;
        }
    }
    
    /**
     * Coordinated zooming of the four Time Display Panels
     * @param evt 
     */
    private void mouseWheelMovedInFreqDisplayArea(java.awt.event.MouseWheelEvent evt) {         
        int notches = evt.getWheelRotation();
        int zoomCentre = evt.getX();
        double zoomFactor = 1 + notches*Globals.zoomPerMousewheelNotch*Globals.zoomFactorFreq;             
        try {
            probandFreqDisplayLabel.zoomAround(zoomFactor, zoomCentre);
            therapistFreqDisplayLabel.zoomAround(zoomFactor, zoomCentre);
            equalizerDisplayLabel.zoomAround(zoomFactor, zoomCentre);               
            Globals.zoomFactorFreq = zoomFactor;
        } catch (Exception ex) {
            System.out.println("Error while zooming: " + ex.toString());
        }   
    }
    
    /**
     * Coordinates shifting of the four Time Display Panels
     * @param evt 
     */
    private void mouseDraggedInFreqDisplayArea(MouseEvent evt) {
        int deltaX = evt.getX() - lastMouseDraggedPosition;
        lastMouseDraggedPosition = evt.getX();
        probandFreqDisplayLabel.shift(deltaX);
        therapistFreqDisplayLabel.shift(deltaX);
        equalizerDisplayLabel.shift(deltaX);            
    }
    
    /**
     * Get the start position for dragging and zoom to standard by rightclick
     * (Both for the four time display panels)
     * @param evt 
     */
    private void mousePressedInFreqDisplayArea(MouseEvent evt) {
        if (evt.getButton() == MouseEvent.BUTTON1){
            lastMouseDraggedPosition = evt.getX();
        } 
        else if (evt.getButton() == MouseEvent.BUTTON3){
            probandFreqDisplayLabel.zoom(Globals.standardZoomFactorTransformed);
            therapistFreqDisplayLabel.zoom(Globals.standardZoomFactorTransformed);
            equalizerDisplayLabel.zoom(Globals.standardZoomFactorTransformed);            
            Globals.zoomFactor = Globals.standardZoomFactorTransformed;
        }
    }
    
    /**
     * Get the start position for dragging the equalizer band borders.
     * @param evt 
     */
    private void mousePressedInEqDisplayArea(MouseEvent evt) {
        if (evt.getButton() == MouseEvent.BUTTON1){
            lastMouseDraggedPosition = evt.getX();
        } 
    }
    
    /**
     * Shift the equalizer band borders.
     * @param evt 
     */
    private void mouseDraggedInEqDisplayArea(MouseEvent evt) {
        int deltaXPos = evt.getX() - lastMouseDraggedPosition;
                equalizerDisplayLabel.shiftNearestBorder(lastMouseDraggedPosition, deltaXPos);
                lastMouseDraggedPosition = evt.getX(); 
                equalizerDisplayLabel.equalizeAll();
                retransform();
                mix();
    }
    
    /**
     * Change the amplification factor of the equalizer band where the mouse wheel was moved.
     * @param evt 
     */
    private void mouseWheelMovedInEqDisplayArea(MouseWheelEvent evt) {
        equalizerDisplayLabel.changeAmpFactorAt(evt.getX(), evt.getWheelRotation());                             
        equalizerDisplayLabel.equalizeAll();
        retransform();
        mix();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel equalizerDisplayPanel;
    private javax.swing.JLabel equalizerFileNameLabel;
    private javax.swing.JButton equalizerOpenButton;
    private javax.swing.JButton equalizerSaveButton;
    private javax.swing.JPanel equalizerTitelPanel;
    private javax.swing.JLabel equalizerTitleLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mixDisplayPanel;
    private javax.swing.JLabel mixProbandLabel;
    private javax.swing.JSlider mixSlider;
    private javax.swing.JLabel mixTherapistLabel;
    private javax.swing.JLabel mixTitleLabel;
    private javax.swing.JPanel mixTitlePanel;
    private javax.swing.JPanel pedalDisplayPanel;
    private javax.swing.JLabel pedalFileNameLabel;
    private javax.swing.JButton pedalOpenButton;
    private javax.swing.JLabel pedalTitleLabel;
    private javax.swing.JPanel pedalTitlePanel;
    private javax.swing.JPanel probandFreqDisplayPanel;
    private javax.swing.JLabel probandFreqTitleLabel;
    private javax.swing.JPanel probandFreqTitlePanel;
    private javax.swing.JPanel probandTimeDisplayPanel;
    private javax.swing.JLabel probandTimeFileNameLabel;
    private javax.swing.JButton probandTimeOpenButton;
    private javax.swing.JLabel probandTimeTitleLabel;
    private javax.swing.JPanel probandTimeTitlePanel;
    private javax.swing.JButton setToStandardButton;
    private javax.swing.JPanel therapistFreqDisplayPanel;
    private javax.swing.JPanel therapistFreqTitlePanel;
    private javax.swing.JPanel therapistTimeDisplayPanel;
    private javax.swing.JLabel therapistTimeFileNameLabel;
    private javax.swing.JButton therapistTimeOpenButton;
    private javax.swing.JLabel therapistTimeTitleLabel;
    private javax.swing.JPanel therapistTimeTitlePanel;
    private javax.swing.JLabel therpistFreqTitleLabel;
    // End of variables declaration//GEN-END:variables

    private void initMyThings() {
        
        //init the Listeners
       
        MouseAdapter timeDisplayMouseAdapter = new MouseAdapter(){
            @Override
            public void mouseDragged(MouseEvent evt) {
                mouseDraggedInTimeDisplayArea(evt);
            }  
            
            @Override
            public void mousePressed(MouseEvent evt) {
                mousePressedInTimeDisplayArea(evt);
            }
            
            @Override
            public void mouseWheelMoved(MouseWheelEvent evt) {
                mouseWheelMovedInTimeDisplayArea(evt);
            }            
        };
            
        MouseAdapter freqDisplayMouseAdapter = new MouseAdapter(){
            @Override
            public void mouseDragged(MouseEvent evt) {
                mouseDraggedInFreqDisplayArea(evt);
            }  
            
            @Override
            public void mousePressed(MouseEvent evt) {
                mousePressedInFreqDisplayArea(evt);
            }
            
            @Override
            public void mouseWheelMoved(MouseWheelEvent evt) {
                mouseWheelMovedInFreqDisplayArea(evt);
            }          
        };
        
        MouseAdapter eqDisplayMouseAdapter = new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent evt) {
                mouseDraggedInEqDisplayArea(evt);
            }  
            
            @Override
            public void mousePressed(MouseEvent evt) {
                mousePressedInEqDisplayArea(evt);
            }
            
            @Override
            public void mouseWheelMoved(MouseWheelEvent evt) {
                mouseWheelMovedInEqDisplayArea(evt);
            }     
        };
        
        //Init the proband Display Labels
        probandTimeDisplayLabel = new SampleDisplayLabel(new TimeSample(new ArrayList<Double>(), Globals.samplingRate, false));
        probandTimeDisplayPanel.setLayout(new BorderLayout());
        probandTimeDisplayPanel.add(probandTimeDisplayLabel, BorderLayout.CENTER);
        probandTimeDisplayPanel.addMouseListener(timeDisplayMouseAdapter);
        probandTimeDisplayPanel.addMouseMotionListener(timeDisplayMouseAdapter);
        probandTimeDisplayPanel.addMouseWheelListener(timeDisplayMouseAdapter);
        
        probandFreqDisplayLabel = new SampleDisplayLabel(new FreqSample(new ArrayList<Double>(), 
                Globals.samplingRate, Sample.DISPLAY_MODE_RECIPROCAL, false));
        probandFreqDisplayPanel.setLayout(new BorderLayout());
        probandFreqDisplayPanel.add(probandFreqDisplayLabel, BorderLayout.CENTER);
        probandFreqDisplayPanel.addMouseListener(freqDisplayMouseAdapter);
        probandFreqDisplayPanel.addMouseMotionListener(freqDisplayMouseAdapter);
        probandFreqDisplayPanel.addMouseWheelListener(freqDisplayMouseAdapter);
        
        
        //Init the therapist display Labels
        therapistTimeDisplayLabel = new SampleDisplayLabel(new TimeSample(new ArrayList<Double>(), Globals.samplingRate, false));
        therapistTimeDisplayPanel.setLayout(new BorderLayout());
        therapistTimeDisplayPanel.add(therapistTimeDisplayLabel, BorderLayout.CENTER);
        therapistTimeDisplayPanel.addMouseListener(timeDisplayMouseAdapter);
        therapistTimeDisplayPanel.addMouseMotionListener(timeDisplayMouseAdapter);
        therapistTimeDisplayPanel.addMouseWheelListener(timeDisplayMouseAdapter);
        
        therapistFreqDisplayLabel = new SampleDisplayLabel(new FreqSample(new ArrayList<Double>(), 
                Globals.samplingRate, Sample.DISPLAY_MODE_RECIPROCAL, false));
        therapistFreqDisplayPanel.setLayout(new BorderLayout());
        therapistFreqDisplayPanel.add(therapistFreqDisplayLabel, BorderLayout.CENTER);
        therapistFreqDisplayPanel.addMouseListener(freqDisplayMouseAdapter);
        therapistFreqDisplayPanel.addMouseMotionListener(freqDisplayMouseAdapter);
        therapistFreqDisplayPanel.addMouseWheelListener(freqDisplayMouseAdapter);
        
        //Init the Equalizer display Label
        equalizerDisplayPanel.setLayout(new BorderLayout());
        equalizerDisplayPanel.addMouseListener(eqDisplayMouseAdapter);
        equalizerDisplayPanel.addMouseMotionListener(eqDisplayMouseAdapter);
        equalizerDisplayPanel.addMouseWheelListener(eqDisplayMouseAdapter);        
        
        //Init the mix display Label
        mixDisplayLabel = new SampleDisplayLabel(new TimeSample(new ArrayList<Double>(), Globals.samplingRate, false));
        mixDisplayPanel.setLayout(new BorderLayout());
        mixDisplayPanel.add(mixDisplayLabel, BorderLayout.CENTER);
        mixDisplayPanel.addMouseListener(timeDisplayMouseAdapter);
        mixDisplayPanel.addMouseMotionListener(timeDisplayMouseAdapter);
        mixDisplayPanel.addMouseWheelListener(timeDisplayMouseAdapter);
        
         //Init the mix pedal Label
        pedalDisplayLabel = new SampleDisplayLabel(new TimeSample(new ArrayList<Double>(), Globals.samplingRate, false));
        pedalDisplayPanel.setLayout(new BorderLayout());
        pedalDisplayPanel.add(pedalDisplayLabel, BorderLayout.CENTER);
        pedalDisplayPanel.addMouseListener(timeDisplayMouseAdapter);
        pedalDisplayPanel.addMouseMotionListener(timeDisplayMouseAdapter);
        pedalDisplayPanel.addMouseWheelListener(timeDisplayMouseAdapter);
        
    }
    
    /**
     * Creates a new EqualizerDisplayLabel and places it in the equalizerDisplayPanel.
     * The proband and therapist time and freq Labels are added to the associatedDisplayLabels list.
     * So all four are going to be equalized automatically, when equalizer.equalizeAll() is called.
     */
    void createEqualizerDisplayLabel(){
        equalizer = Equalizer.standardEqualizer();
        associatedDisplayLabels = new ArrayList();
        associatedDisplayLabels.add(probandFreqDisplayLabel);//erstes muss Freq sein für die Einheiten
        //associatedDisplayLabels.add(probandTimeDisplayLabel);        
        //associatedDisplayLabels.add(therapistTimeDisplayLabel);
        associatedDisplayLabels.add(therapistFreqDisplayLabel);        
        try{equalizerDisplayPanel.remove(equalizerDisplayLabel);}
        catch(Exception ex){
            
        }
        equalizerDisplayLabel = new EqualizerDisplayLabel(associatedDisplayLabels, equalizer);
        equalizerDisplayPanel.add(equalizerDisplayLabel, BorderLayout.CENTER);
        this.pack();
    }
    
    /**
     * Mix the data
     */
    public void mix() {
        double[] probandArray = probandTimeDisplayLabel.getSample().getDataArray();
        double[] therapistArray = therapistTimeDisplayLabel.getSample().getDataArray();
        int size = Math.max(probandArray.length, therapistArray.length);
        double[] mixArray = new double[size];
        for (int i=0; i<size; ++i){
            try{
                mixArray[i] = mixFactor*probandArray[i];
            } catch (Exception ex){
                mixArray[i]=0;
            }
            try{
                mixArray[i] = mixArray[i] + (1-mixFactor)*therapistArray[i];            
            } catch (Exception ex){
                
            }
            if (Globals.origIntensMode == Globals.ORIG_INTENS_MODE_INTENSITY)
                mixArray[i] = Math.pow(mixArray[i], 2);
        }
        mixDisplayLabel.setSample(new TimeSample(mixArray, probandTimeDisplayLabel.getSample().getSamplingRate(),false));
        mixDisplayLabel.repaint();
    }
    
    /**
     * Retransform the two Frequency Samples. Use after equalizing the frequency samples
     * to see the effect of equalizing on the time samples.
     */
    public void retransform() {
        
        probandTimeDisplayLabel.setSample(FFTransformer.transformInverse((FreqSample)probandFreqDisplayLabel.getSample()));
        therapistTimeDisplayLabel.setSample(FFTransformer.transformInverse((FreqSample)therapistFreqDisplayLabel.getSample()));
        probandTimeDisplayLabel.repaint();
        therapistTimeDisplayLabel.repaint();
                
    }   
   
}
